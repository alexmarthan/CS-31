Full Name: Alexandre Marthan
UCLA ID: 505719814

a. One of the biggest obstacles I overcame was that all my uses of the .at function would go out of bounds if someone inputted: "3245245" or "". So, it would work on my Xcode (I hadn't thought of asserts that tested this) but wouldn't compile on Codeboard.
Another obstacle I had was figuring out where I was in the string while iterating through it, and why my iterator skipped a step sometimes.

b. My program consists of three functions I created myself to simplify the code. The first is the numberz function which takes a string and an index (size_t) and returns an int representing the quantity of an Item. It starts in the string at the index inputted and continues until the char at that point is no longer a digit. 

Another function I made was the IsACategory function that takes a string and a size_t and returns a bool. The purpose of this function is to determine if the char at a certain position in a string is one of the item categories. This function was used in the IsValidOrderString function to check if the string inputted had valid item categories (1,2,3,C,V or S).

My final non-required function was the countingReps function which took in a string and returned an integer value representing the number of times we should loop our other functions. Essentially, this function counts the number of underscores and determines how many orders of separate items there are.

For my IsValidOrderString function the general strategy was to start of assuming everything was true and then account for all the exceptions one by one.

c. 

assert(isValidOrderString("V:C") == false); testing if program understands that value preceding colon can only be a digit

assert(isValidOrderString("5:3") == true); testing the basic true case


assert(isValidOrderString("13:T") == false); testing if program understands that value following colon isn't an ItemCategory

assert(isValidOrderString("80:3") == false); testing if the program understands that the quantity is too big

assert(isValidOrderString("40:C_10:1") == false); testing if program understands that the total quantity mustn't exceed or equal 50

assert(isValidOrderString("0:V") == false); testing if program understands that a quantity of 0 for an item is invalid

assert(isValidOrderString("12:3_") == false); testing if program understands that the inputted string can't end with an underscore

assert(cost("2:3") == 15.100000); testing if base case is true + calculation works
assert(cost("2:1_2:1") == 37.800000); testing if sum of both orders works
assert(cost("2:22:1") == -1.0000000); testing if wrong input gives -1

assert(howManyCombos("1:1", 3) == 0); testing if we ask for an item that isn't in the string, function returns zero

assert(howManyCombos("12:2_1:3", 3) == 1); testing that function counts quantity for the right item

assert(howManyShakes("12:2_1:3_2:3", "Chocolate") == 0); testing that function counts zero if item category not in the inputted string

assert(howManyShakes("12:2_1:C_2:V", "Vanilla") == 2); testing that function counts quantity for the right item

assert(howManyShakes("12:V_1:V_2:V", "Vanilla") == 15); testing that function sums up correctly the quantity for different orders of same item

